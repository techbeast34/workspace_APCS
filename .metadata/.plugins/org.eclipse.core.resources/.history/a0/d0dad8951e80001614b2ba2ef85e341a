import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class ZipcodeToBarcode {
	static final String[] encodedBarcode = { 
			"||:::", // 0
			":::||", // 1
			"::|:|", // 2
			"::||:", // 3
			":|::|", // 4
			":|:|:", // 5
			":||::", // 6
			"|:::|", // 7
			"|::|:", // 8
			"|:|::" }; // 9

	public static void main(String[] args) throws FileNotFoundException {
		File zipCodeFile = new File("ZipCodes.txt");
		File cityFile = new File("ZipCodesCity.txt");
		File barcodeFile = new File("ZipBarCodes.txt");
		Scanner zipcodeFileScanner = new Scanner(zipCodeFile);
		Scanner cityFileScanner = new Scanner(cityFile);
		Scanner barcodeScanner = new Scanner(barcodeFile);
		String[] barcodeArray = new String[6];
		String[] zipCode = new String[6];
		String barcode = "";
		
		while (zipcodeFileScanner.hasNext()) {
			zipCode = readZipCode(zipcodeFileScanner);
			barcodeArray = encodeZipCode(zipcodeFileScanner, zipCode);
			printBarCode(barcodeArray, zipCode, cityFileScanner, cityFile);
			cityFileScanner = new Scanner(cityFile);
		}
		//Parts 1 and 2
		
		zipCode = new String[6];
		cityFileScanner.close();
		cityFileScanner = new Scanner(cityFile);
		//Reinitialize scanner and zipcode array for part 3
		
		while (barcodeScanner.hasNext()) {
			barcode = barcodeScanner.nextLine();
			zipCode = decodeBarcode(barcode);
			printZipCode(zipCode, barcode, cityFileScanner);
			cityFileScanner = new Scanner(cityFile);
		}
		//Part 3
		
		zipcodeFileScanner.close();
		cityFileScanner.close();
		barcodeScanner.close();
		//Close scanners, clean up
	}
	
	/**
	 * Prints out the barcode and corresponding zipcode when reading the barcode file
	 * @param zipCode The zipcode read in
	 * @param barcode the barcode also read in
	 * @param scanner Scannef for scanning through city file.
	 */
	private static void printZipCode(String[] zipCode, String barcode, Scanner scanner) {
		int checkTotal = 0;
		int checkDigit = Integer.parseInt(zipCode[zipCode.length - 1]);
		boolean isInvalid = false;
		
		for (int i = 0; i < 5; i++) {
			try {
				checkTotal += Integer.parseInt(zipCode[i]);
			}
			catch(Exception e){
				isInvalid = true;
			}
		}
		
		String zipcode = "";
		String currentLine = "";
		String city = "";
		for (int i = 0; i < zipCode.length - 1; i++) {
			if(!isInvalid){
				zipcode += zipCode[i];
			}
		}
		
		while (scanner.hasNext()) {
			currentLine = scanner.nextLine();
			if (currentLine.contains(zipcode) && !isInvalid) {
				city += currentLine.replace(",", " ").replace(zipcode, "").trim() + "\n";
			}
		}
		

		
		if (checkDigit == 10 - (checkTotal % 10) || (checkTotal % 10 == 0 && checkDigit == 0)) {
			System.out.print(barcode + "------->");
				if(!isInvalid)
					System.out.println(zipcode);
				else if(isInvalid){
					System.out.println("ERROR - Invalid Barcode!");
				}
				if(isInvalid || city.equals("")){
					city = "No Location Found. \n";
				}
			System.out.println(city);
		} 
		else if(!isInvalid){
			System.out.print(barcode + "------->");
			System.out.println("ERROR - Invalid Check Digit!");
			if(isInvalid || city.equals("")){
				city = "No Location Found. \n";
			}
			System.out.println(city);
		}
		
		
	}
	
	/**
	 * Decodes the barcode and translates it into a zipcode
	 * @param barcode The barcode to be read in
	 * @return The zip code, with each number as an element in an array of strings. The check digit is the last element in the array.
	 */
	private static String[] decodeBarcode(String barcode) {
		String barcodeBit = "";
		char[] barcodeArray = new char[32];
		String[] zipCode = new String[6];
		int count = 0;
	
		for(int i = 1; i <= barcode.toCharArray().length - 2; i++){
				barcodeArray[i] = barcode.toCharArray()[i];
		}

		for (int i = 0; i < barcodeArray.length; i++) {
			
				barcodeBit += barcodeArray[i];
				
				if (i % 5 == 0) {
					if (count >= 6) {
						count = 0;
					}
					for (int c = 0; c < encodedBarcode.length; c++) {
						if (encodedBarcode[c].equals(barcodeBit)) {
							zipCode[count] = c + "";
						}
						else if(c > 9){
							zipCode[count] = "-1";
						}
					}
					System.out.println(barcodeBit);
					barcodeBit = "";
					count++;
				}
			}
		return zipCode;
	}
	
	/**
	 * prints readable and postal barcodes based on zipcode
	 * 
	 * @param barcode The barcode array
	 * @param zipCode The zipcode 
	 * @param scanner The scanner
	 * @param cityFile The file of zipcodes and corresponding cities
	 * @throws FileNotFoundException just in case the city file is not found.
	 */
	private static void printBarCode(String[] barcode, String[] zipCode, Scanner scanner, File cityFile)
			throws FileNotFoundException {
		String zipcode = "";
		String currentLine = "";
		String city = "";
		for (int i = 0; i < zipCode.length; i++) {
			zipcode += zipCode[i];
		}
		
		
		while (scanner.hasNext()) {
			currentLine = scanner.nextLine();
			if (currentLine.contains(zipcode)) {
				city += currentLine.replace(",", " ").trim() + "\n";
			}
		}
		
		System.out.println(city);
		System.out.print("\t Readable Barcode");
		System.out.print(" | ");
		for (int i = 0; i < barcode.length; i++) {
			System.out.print(" " + barcode[i]);
		}
		System.out.print(" |");
		System.out.println();
		System.out.print("     \t Postal Barcode ");
		System.out.print("|");
		for (int i = 0; i < barcode.length; i++) {
			System.out.print(barcode[i]);
		}
		System.out.print("|");
		System.out.println();
		System.out.println();
	}
	
	/**
	 * Encodes the zip codes into barcodes.
	 * 
	 * @param scanner The scanner for the zipcode file
	 * @param zipCode The array for the zipcode
	 * @return A barcode.
	 */
	private static String[] encodeZipCode(Scanner scanner, String[] zipCode) {

		String[] barCode = new String[6];
		int total = 0;
		int checkDigit = 0;
		for (int i = 0; i < 5; i++) {
			total += Integer.parseInt(zipCode[i]);
		}
		checkDigit = 10 - (total % 10);
		if (checkDigit == 10) {
			checkDigit = 0;
		}
		for (int i = 0; i < zipCode.length; i++) {
			barCode[i] = encodedBarcode[Integer.parseInt(zipCode[i])];
		}
		barCode[5] = encodedBarcode[checkDigit];
		return barCode;
	}
	
	/**
	 * Reads in zipcodes
	 * @param scanner The scanner for zipcodes
	 * @return An array where the zipcode is stored.
	 */
	private static String[] readZipCode(Scanner scanner) {
		
		String zipCode = scanner.next();
		String[] zipCodeArray = new String[5];
		for (int i = 0; i < zipCodeArray.length; i++) {
			zipCodeArray[i] = zipCode.charAt(i) + "";
		}
		return zipCodeArray;
	}

}
